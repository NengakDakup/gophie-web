{"version":3,"sources":["components/movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","link","this","props","to","console","log","react_default","a","createElement","className","src","image","alt","name","size","target","rel","href","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchValue","movieLink","movies","listIndex","isLoading","hasMore","error","window","onscroll","_assertThisInitialize2","assertThisInitialized","windowHeight","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","performList","handleSearchChange","bind","performSearch","checkKey","newSearch","event","setState","value","e","charCode","_this2","axios","get","concat","then","res","data","newIndex","newmovies","map","element","index","Index","toConsumableArray","catch","err","type","placeholder","id","onKeyPress","onChange","onClick","movie_Movie","key","Title","Size","CoverPhotoLink","DownloadLink","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.932b5879.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/movie.css\";\n\nexport default class Movie extends Component {\n  render() {\n    let link = this.props.to[\"Scheme\"] + \"://\" + this.props.to[\"Host\"] + this.props.to[\"Path\"] + \"?\" + this.props.to[\"RawQuery\"]\n    console.log(link)\n    return (\n      <div className=\"movie\">\n        <div className=\"movie-image\">\n          <img src={this.props.image} alt=\"\" />\n        </div>{\" \"}\n        <div className=\"about\">\n          <p className=\"name\"> {this.props.name} </p>{\" \"}\n          <p className=\"by\"> Size: {this.props.size} </p>{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n            {\" \"}\n            Download this movie{\" \"}\n          </a>{\" \"}\n        </div>{\" \"}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Movie from \"./components/movie.js\";\nimport \"./css/App.css\";\nimport \"./css/loader.css\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: \"\",\n      movieLink: \"https://gophie.herokuapp.com/\",\n      movies: [],\n      listIndex: 1,\n      isLoading: false,\n      hasMore: true,\n      error: false\n    };\n\n    window.onscroll = () => {\n      const {\n        state: { isLoading, hasMore, error }\n      } = this;\n\n      // Bails early if:\n      // * there's an error\n      // * it's already loading\n      // * there's nothing left to load\n      if (isLoading || !hasMore || error) return;\n \n    const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n    const body = document.body;\n    const html = document.documentElement;\n    const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight,  html.scrollHeight, html.offsetHeight);\n    const windowBottom = windowHeight + window.pageYOffset\n\n      // Checks that the page has scrolled to the bottom\n      //if (\n        //(window.innerHeight + document.documentElement.scrollTop ===\n        //document.documentElement.offsetHeight) && (this.state.searchValue === \"\")\n      //) \n      if ((windowBottom >= docHeight) && (this.state.searchValue === \"\")){\n        this.performList();\n      }\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.performList = this.performList.bind(this);\n    this.performSearch = this.performSearch.bind(this)\n    this.checkKey = this.checkKey.bind(this);\n    this.newSearch = this.newSearch.bind(this);\n  }\n\n\n  handleSearchChange(event) {\n    this.setState({\n      searchValue: event.target.value\n    });\n  }\n  newSearch() {\n    this.setState({\n      movies: []\n    });\n    this.performSearch();\n  }\n  checkKey(e) {\n    // eslint-disable-next-line\n    if (e.charCode != 13) return;\n    this.setState({\n      movies: []\n    });\n    this.performSearch();\n  }\n  performSearch(){}\n  performList() {\n    this.setState({\n      isLoading: true\n    });\n    axios.get(\n        `${this.state.movieLink}?list=${this.state.listIndex}`\n      )\n      .then(res => {\n        console.log(this.state.listIndex)\n        const movies = res.data\n        let newIndex = this.state.listIndex;\n        let newmovies = movies.map((element, index) => {\n          element.Index = element.Index + ((newIndex -1) * 14)\n          return element\n        })\n        console.log(newmovies)\n        newIndex += 1;\n        this.setState({\n          isLoading: false,\n          movies: [...this.state.movies, ...newmovies],\n          listIndex: newIndex\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: true\n        });\n      console.log(err)\n      });\n  }\n\n  componentDidMount () {\n    this.performList();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            placeholder=\"Find a movie\"\n            name=\"\"\n            id=\"\"\n            onKeyPress={this.checkKey}\n            onChange={this.handleSearchChange}\n          />{\" \"}\n          <button onClick={this.newSearch}> Search </button>{\" \"}\n        </div>{\" \"}\n        <div className=\"movies\">\n          {\" \"}\n          {this.state.movies.map((element, index) => {\n            return (\n              <Movie\n                key={element.Index}\n                name={element.Title}\n                size={element.Size}\n                image={element.CoverPhotoLink}\n                to={element.DownloadLink}\n              />\n            );\n          })}{\" \"}\n        </div>{\" \"}\n        {this.state.isLoading && !this.state.error && (\n          <div className=\"loader\">\n            <div className=\"lds-roller\">\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n            </div>{\" \"}\n          </div>\n        )}{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}